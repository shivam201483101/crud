package com.sbi.yono.common.utility;

import java.sql.CallableStatement;
import java.sql.Connection;

import org.apache.commons.lang.exception.ExceptionUtils;
import org.springframework.jdbc.core.ConnectionCallback;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import com.sbi.yono.common.accountopening.AccountOpeningConstant;
import com.tcs.techbone.exception.ServiceBusinessException;
import com.tcs.techbone.logger.FLogger;

@Component
public class DeleteUtility {
	
	private JdbcTemplate jdbcTemplate;
	ErrorCodeMapper erMap = new ErrorCodeMapper();

	public DeleteUtility(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate=jdbcTemplate;
	}
	/**
	 * Method: deleteFunction  Delete all entry from database for starting new application
	 * @param leadId string
	 * @throws ServiceBusinessException
	 */
	public String deleteFunction(String leadId) throws ServiceBusinessException {
		
		String thisMethod="deleteFunction";
		FLogger.info(Constant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,Constant.METHOD_STARTED.getValue());
		ServiceBusinessException businessException = new ServiceBusinessException();
		try {
			FLogger.info(Constant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,
					Constant.EXCUTESTOREPROCEDURE.getValue());
			jdbcTemplate.execute(new ConnectionCallback<Void>() {
				@Override
				public Void doInConnection(Connection connection) {
					try(CallableStatement cs=connection.prepareCall("{CALL yono_cstmr.delete_lead_data(?)}")){
						FLogger.info(Constant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,
								Constant.EXCUTINGSTOREPROCEDURE.getValue());
						cs.setString(1,leadId);
						cs.execute();
					}catch(Exception e) {
						businessException.addBizError(erMap.mapCode(leadId.substring(5, 8),Constant.FAILEDTOEXCEUTE.getValue()));
						FLogger.info(Constant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,
								Constant.EXCUTIONFAILED.getValue());
						FLogger.error(Constant.TIER_NAME.getValue(), this.getClass().getName(),
				                thisMethod, ExceptionUtils.getStackTrace(e));
						throw new RuntimeException(Constant.FAILEDTOEXCEUTE.getValue(),e);
					}
					return null;
				}
			});
			
		}catch (IllegalArgumentException e) {		
			businessException.addBizError(erMap.mapCode(leadId.substring(5, 8),Constant.FAILEDTOEXCEUTE.getValue()));	
			FLogger.info(Constant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,
					Constant.EXCUTIONFAILED.getValue());
			FLogger.error(Constant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,
					ExceptionUtils.getStackTrace(businessException));
			throw businessException;
		}
		
		FLogger.info(Constant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,Constant.METHOD_END.getValue());
		return Constant.SUCCESS.getValue();
		
	}

}



java.lang.IllegalStateException: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)
	at org.mockito.internal.configuration.plugins.PluginLoader$1.invoke(PluginLoader.java:85)
	at jdk.proxy2/jdk.proxy2.$Proxy14.isTypeMockable(Unknown Source)
	at org.mockito.internal.util.MockUtil.typeMockabilityOf(MockUtil.java:78)
	at org.mockito.internal.util.MockCreationValidator.validateType(MockCreationValidator.java:22)
	at org.mockito.internal.creation.MockSettingsImpl.validatedSettings(MockSettingsImpl.java:275)
	at org.mockito.internal.creation.MockSettingsImpl.build(MockSettingsImpl.java:236)
	at org.mockito.internal.MockitoCore.mock(MockitoCore.java:82)
	at org.mockito.Mockito.mock(Mockito.java:2198)
	at org.mockito.Mockito.mock(Mockito.java:2113)
	at com.sbi.yono.common.utility.DeleteUtilityTest.setUp(DeleteUtilityTest.java:38)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: java.lang.IllegalStateException: Internal problem occurred, please report it. Mockito is unable to load the default implementation of class that is a part of Mockito distribution. Failed to load interface org.mockito.plugins.MockMaker
	 



package com.sbi.yono.common.utility;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.sql.CallableStatement;
import java.sql.Connection;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.jdbc.core.ConnectionCallback;
import org.springframework.jdbc.core.JdbcTemplate;


public class DeleteUtilityTest {

	@Mock
    private JdbcTemplate jdbcTemplate;
	@InjectMocks
    private DeleteUtility deleteUtility;
	
    @BeforeEach
    public void setUp() {
    	
        jdbcTemplate = Mockito.mock(JdbcTemplate.class);
        deleteUtility = new DeleteUtility(jdbcTemplate);
    	
    }
  
    @Test
    public void testDeleteFunction_returnsSuccess() throws Exception {
        String leadId = "SBIY2NCA252171208650ZNAwBEqX";
      
        Connection mockConnection = mock(Connection.class);
        CallableStatement mockCallableStmt = mock(CallableStatement.class);      
           
        when(jdbcTemplate.execute(ArgumentMatchers.<ConnectionCallback<Void>>any())).thenAnswer(invocation -> {
        	ConnectionCallback<Void> callback=invocation.getArgument(0);
        	return null;
        });
        when(mockConnection.prepareCall("{CALL yono_cstmr.delete_lead_data(?)}"))
        .thenReturn(mockCallableStmt);  
        doNothing().when(mockCallableStmt).setString(1, leadId);
        doNothing().when(mockCallableStmt).execute();
        String result = deleteUtility.deleteFunction(leadId);       
        assertEquals("SUCCESS", result);       
        verify(mockConnection).prepareCall("{CALL yono_cstmr.delete_lead_data(?)}");
        verify(mockCallableStmt).setString(1, leadId);
        verify(mockCallableStmt).execute();
        verify(mockCallableStmt).close(); 
    }
}
