package com.sbi.yono.common.utility;

import java.sql.CallableStatement;
import java.sql.Connection;

import org.apache.commons.lang.exception.ExceptionUtils;
import org.springframework.jdbc.core.ConnectionCallback;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import com.sbi.yono.common.accountopening.AccountOpeningConstant;
import com.tcs.techbone.exception.ServiceBusinessException;
import com.tcs.techbone.logger.FLogger;

@Component
public class DeleteUtility {
	
	private JdbcTemplate jdbcTemplate;
	ErrorCodeMapper erMap = new ErrorCodeMapper();

	public String deleteFunction(String leadId) throws ServiceBusinessException {
		
		String thisMethod="fetchAadharData";
		FLogger.info(Constant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,Constant.METHOD_STARTED.getValue());
		ServiceBusinessException businessException = new ServiceBusinessException();
		try {
		
			jdbcTemplate.execute(new ConnectionCallback<Void>() {
				@Override
				public Void doInConnection(Connection connection) {
					try(CallableStatement cs=connection.prepareCall("{CALL yono_cstmr.delete_lead_data(?)}")){
						cs.setString(1,leadId);
						cs.execute();
					}catch(Exception e) {
						businessException.addBizError(erMap.mapCode(leadId.substring(5, 8),"Failed to exceute store procedure"));				       
						FLogger.error(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
				                thisMethod, ExceptionUtils.getStackTrace(e));
						throw new RuntimeException("Failed to exceute store procedure",e);
					}
					return null;
				}
			});
			
		}catch (IllegalArgumentException e) {		
			
			FLogger.error(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,
					ExceptionUtils.getStackTrace(businessException));
			throw businessException;
		}
		
		FLogger.info(Constant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,Constant.METHOD_END.getValue());
		return Constant.SUCCESS.getValue();
		
	}

}




package com.sbi.yono.common.utility;

import com.sbi.yono.common.accountopening.AccountOpeningConstant;
import com.tcs.techbone.exception.ServiceBusinessException;
import com.tcs.techbone.logger.FLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.springframework.jdbc.core.JdbcTemplate;

import java.sql.CallableStatement;
import java.sql.Connection;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class DeleteUtilityTest {

    private JdbcTemplate jdbcTemplate;
    private DeleteUtility deleteUtility;

    @BeforeEach
    public void setUp() {
        jdbcTemplate = mock(JdbcTemplate.class);
        deleteUtility = new DeleteUtility(jdbcTemplate);
    }

    @Test
    public void testDeleteFunction_returnsSuccess() throws Exception {
        String leadId = "LEAD123456789012345678901234";

        // Mock Connection and CallableStatement
        Connection mockConnection = mock(Connection.class);
        CallableStatement mockCallableStmt = mock(CallableStatement.class);

        // Simulate behavior
        when(mockConnection.prepareCall("{CALL yono_cstmr.delete_lead_data(?)}"))
                .thenReturn(mockCallableStmt);

        // Simulate JdbcTemplate.execute() behavior
        when(jdbcTemplate.execute(any())).thenAnswer(invocation -> {
            ((org.springframework.jdbc.core.ConnectionCallback<?>) invocation.getArgument(0)).doInConnection(mockConnection);
            return null;
        });

        // Execute the deleteFunction
        String result = deleteUtility.deleteFunction(leadId);

        // Assert
        assertEquals("SUCCESS", result);

        // Verify interactions
        verify(mockConnection).prepareCall("{CALL yono_cstmr.delete_lead_data(?)}");
        verify(mockCallableStmt).setString(1, leadId);
        verify(mockCallableStmt).execute();
        verify(mockCallableStmt).close(); // optional, depending on try-with-resources
    }
}
