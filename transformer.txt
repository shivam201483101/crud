public class CkycDownloadEISInputTransformer implements ICustomInputTransformer { private String thisClass = "CkycDownloadEISInputTransformer"; public static final String TIER_NAME = "SBIYONOEISIntegrationService"; public static final String INPUT = "Input param obtained is : "; public static final String EXCEPTION = " Exception occured : "; @SuppressWarnings({ "unchecked", "rawtypes" }) public Object transform(Object p_objType, Class p_classType) throws TransformationException { String thisMethod = "transform"; FLogger.info(TIER_NAME, this.thisClass, thisMethod, "Method started"); FLogger.debug(TIER_NAME, this.thisClass, thisMethod, "Method started with parameters string:" + p_objType + " and Class type: " + p_classType); Object obj = null; try { String stringvalue = p_objType.toString(); if (p_classType.equals(String.class)) { obj = stringvalue; } else { obj = new Object(); ObjectMapper mapper = new ObjectMapper(); if (stringvalue != null) obj = mapper.readValue(JsonSanitizer.sanitize(stringvalue), p_classType); } FLogger.debug(TIER_NAME, this.thisClass, thisMethod, "The transformed values from JSON string to JAVA objects are " + obj); } catch (JsonMappingException e) { throw new TransformationException("1607", e); } catch (IOException e) { throw new TransformationException("1604", e); } FLogger.debug(TIER_NAME, this.thisClass, thisMethod, "Method ended with output " + obj); FLogger.info(TIER_NAME, this.thisClass, thisMethod, "Method ended"); return obj; } @SuppressWarnings("unchecked") public Map<String, Object> CustomInputTransformer(CustomServiceDefinition p_customServiceDefinition, Map<String, Object> p_commandServiceInputParamMap) throws TransformationException, JsonMappingException, JsonProcessingException { String thisMethod = "CustomInputTransformer"; FLogger.info(TIER_NAME, this.thisClass, thisMethod, "Method started"); FLogger.debug(TIER_NAME, this.thisClass, thisMethod, "Method started with Object Type array:Service Definition is: " + p_customServiceDefinition + "Service Input Map is : " + p_commandServiceInputParamMap); List<ParameterTypeDefinition> llistServiceParam = null; Map<String, Object> lobjTransformedMap = new HashMap<>(); if (!p_customServiceDefinition.getCustomEndpoint().getServiceInput().getParameter().isEmpty()) { llistServiceParam = p_customServiceDefinition.getCustomEndpoint().getServiceInput().getParameter(); FLogger.debug(TIER_NAME, this.thisClass, thisMethod, "Service input params size :" + llistServiceParam.size() + "And serviceparam list is : " + llistServiceParam); } if(llistServiceParam!=null) { for (ParameterTypeDefinition i_inputParam : llistServiceParam) { if (p_commandServiceInputParamMap.containsKey(i_inputParam.getParameterName())) { Object req = p_commandServiceInputParamMap.get(i_inputParam.getParameterName()); FLogger.debug(TIER_NAME, this.thisClass, thisMethod, "req Object is: " + req); if (req instanceof String) { String jsonString = (String) req; String lobjServiceParam = null; ObjectMapper objectMapper = new ObjectMapper(); JsonNode jsonNode = objectMapper.readTree(jsonString); FLogger.debug(TIER_NAME, this.thisClass, thisMethod, "Json node is : " + jsonNode); if (i_inputParam.getParameterName().equals("response")) { String rrn=null; try { rrn = Aadharutils.generateRRN(); } catch (NoSuchAlgorithmException e) { FLogger.info(TIER_NAME, this.thisClass, thisMethod, "Exception occured"); } lobjTransformedMap.put("SOURCE_ID", "Y2"); lobjTransformedMap.put("DESTINATION", "CKYC"); lobjTransformedMap.put("TXN_TYPE", "DOWNLOAD"); lobjTransformedMap.put("TXN_SUB_TYPE", "CERSAI_DETAILS"); lobjTransformedMap.put("REQUEST_REFERENCE_NUMBER", rrn); lobjServiceParam = jsonNode.get("ckycPayload").toString(); String ckycPayload = null; Map<Object,Object> ckycPayloadMap = null; ckycPayload = this.cnvrtNstdJsonToCaps(lobjServiceParam); ckycPayloadMap = objectMapper.readValue(ckycPayload, Map.class); FLogger.debug(TIER_NAME, this.thisClass, thisMethod, INPUT + lobjServiceParam); lobjTransformedMap.put("EIS_PAYLOAD", ckycPayloadMap); } } } FLogger.info(TIER_NAME, this.thisClass, thisMethod, "Method ended : "); FLogger.info(TIER_NAME, this.thisClass, thisMethod, "Method ended with result : " + lobjTransformedMap); } } return lobjTransformedMap; } public String cnvrtNstdJsonToCaps(String inputJson) throws JsonProcessingException { // Parse the input JSON string to JsonNode ObjectMapper objectMapper = new ObjectMapper(); JsonNode rootNode = objectMapper.readTree(inputJson); // Create a list of field names List<String> fieldNames = new ArrayList<>(); rootNode.fieldNames().forEachRemaining(fieldNames::add); if (rootNode instanceof ObjectNode) { ObjectNode convertedNode = (ObjectNode) rootNode; for (String fieldName : fieldNames) { String newFieldName = this.convertToSnakeCase(fieldName).toUpperCase(); if(newFieldName.equalsIgnoreCase("BRANCH_CODE")) { newFieldName="BRANCH_CODE"; } else if(newFieldName.equalsIgnoreCase("AUTH_FACTOR")) { newFieldName="AUTH_FACTOR"; } else if(newFieldName.equalsIgnoreCase("AUTH_FACTOR_TYPE")) { newFieldName="AUTH_FACTOR_TYPE"; } else if(newFieldName.equalsIgnoreCase("CKYC_NO")) { newFieldName="CKYC_NO"; } convertedNode.set(newFieldName, convertedNode.get(fieldName)); convertedNode.remove(fieldName); } } return objectMapper.writeValueAsString(rootNode); } private String convertToSnakeCase(String camelCase) { StringBuilder snakeCase = new StringBuilder(); for (int i = 0; i < camelCase.length(); i++) { char c = camelCase.charAt(i); if (Character.isUpperCase(c)) { if (snakeCase.length() > 0) { snakeCase.append('_'); } snakeCase.append(Character.toLowerCase(c)); } else { snakeCase.append(c); } } return snakeCase.toString(); } } <service> <service-name>eis_customer_ckyc_generate_otp</service-name> <service-id>eis_customer_ckyc_generate_otp</service-id> <service-type>CUSTOM</service-type> <factory-class>com.sbi.yono.integration.eis.service.EISServiceFactory</factory-class> <invocation-mode>sync</invocation-mode> <customendpoint> <!-- Add service input params as like in any other factory --> <service-input> <parameter> <parameter-name>cersaigenerateotpreq</parameter-name> <parameter-class>java.lang.String</parameter-class> </parameter> </service-input> <!-- factory configurations for custom configurations to be provided externally --> <factory-custom-config> <factory-config> <config-name>env-server-address</config-name> <config-value>${eis-server}</config-value> </factory-config> <factory-config> <config-name>api-url</config-name> <config-value>${eis-debitNew}</config-value> </factory-config> </factory-custom-config> <timeout>2</timeout> </customendpoint> <service-output> <parameter> <parameter-name>CustInfoResp</parameter-name> <parameter-class>java.lang.String</parameter-class> </parameter> </service-output> <!-- Explicit transformer must --> <transformers> <input-transformer-class datatype="application/json">com.sbi.yono.integration.eis.transformer.cersai.CkycDownloadEISInputTransformer </input-transformer-class> <output-transformer-class datatype="application/json">com.sbi.yono.integration.eis.transformer.cersai.CkycDownloadOutputTransformer</output-transformer-class> </transformers> what should be thge format or request body to this eis call transformer give me exact correct format for this eis transfomer CkycDownloadEISInputTransformer
