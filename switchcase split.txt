
public boolean savePersonalDetails(AccountOpeningAppln accountOpeningAppln)
        throws ServiceBusinessException, NumberFormatException, JsonProcessingException {

    String thisMethod = "savePersonalDetails";
    FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.METHOD_STARTED.getValue());
    ServiceBusinessException businessException = new ServiceBusinessException();
    boolean status = false;

    try {
        // Call all partial details methods sequentially
        boolean result1 = spdao.savePartialDetailsPersonal(accountOpeningAppln, Optional.empty());
        boolean result2 = spdao.savePartialDetailsProfessional(accountOpeningAppln, Optional.empty());
        boolean result3 = spdao.savePartialDetailsReligion(accountOpeningAppln, Optional.empty());
        boolean result4 = sPDao1.savePartialDetailsAddDetails(accountOpeningAppln, Optional.empty());
        boolean result5 = sPDao1.savePartialDetailsCommAdd(accountOpeningAppln, Optional.empty());
        boolean result6 = sPDao2.savePartialDetailsNominationPersonal(accountOpeningAppln, Optional.empty());
        boolean result7 = sPDao2.savePartialDetailsNomineePermAdd(accountOpeningAppln, Optional.empty());
        boolean result8 = sPDao2.savePartialDetailsGaurdianPersonal(accountOpeningAppln, Optional.empty());
        boolean result9 = sPDao2.savePartialDetailsGaurdianPermAdd(accountOpeningAppln, Optional.empty());
        boolean result10 = acntDao.saveBranchDetails(accountOpeningAppln);
        boolean result11 = setFlags.saveChecks(accountOpeningAppln);
        boolean result12 = spd3.saveDebitCardDetails(accountOpeningAppln, Optional.empty());
        boolean result13 = spd3.saveTermsAndCondition(accountOpeningAppln, Optional.empty());
        boolean result14 = saveVKYCDao.saveVKYCDetails(accountOpeningAppln, Optional.empty());
        boolean result15 = acntDao.saveCustomerSelfie(accountOpeningAppln);

        // Combine all results
        status = result1 || result2 || result3 || result4 || result5 ||
                 result6 || result7 || result8 || result9 || result10 ||
                 result11 || result12 || result13 || result14 || result15;

        FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.ALL_METHODS_EXECUTED.getValue());
    } catch (ServiceBusinessException e) {
        FLogger.error(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,
                ExceptionUtils.getStackTrace(e));
        throw new ServiceBusinessException(AccountOpeningConstant.UNEXPECTED_ERROR.getValue());
    }

    FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.METHOD_END.getValue());
    return status;
}





private boolean handlePartialDetailsCases(AccountOpeningAppln accountOpeningAppln,
	        Optional<OnboardingStatusVo> statusFindById)
	        throws ServiceBusinessException, JsonProcessingException {
		 String thisMethod="handlePartialDetailsCases";
			FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),thisMethod,AccountOpeningConstant.METHOD_STARTED.getValue());

	    try {
	        switch (accountOpeningAppln.getState()) {
	            case "006":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.NOMINEE_SAVED.getValue());
	                return spdao.savePartialDetailsPersonal(accountOpeningAppln, statusFindById);

	            case "007":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.NOMINEE_SAVED.getValue());
	                return spdao.savePartialDetailsProfessional(accountOpeningAppln, statusFindById);

	            case "008":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.NOMINEE_SAVED.getValue());
	                return spdao.savePartialDetailsReligion(accountOpeningAppln, statusFindById);

	            case "009":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.NOMINEE_SAVED.getValue());
	                return sPDao1.savePartialDetailsAddDetails(accountOpeningAppln, statusFindById);

	            case "010":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.NOMINEE_SAVED.getValue());
	                return sPDao1.savePartialDetailsCommAdd(accountOpeningAppln, statusFindById);

	            case "012":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.NOMINEE_SAVED.getValue());
	                return sPDao2.savePartialDetailsNominationPersonal(accountOpeningAppln, statusFindById);

	            case "013":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.NOMINEE_SAVED.getValue());
	                return sPDao2.savePartialDetailsNomineePermAdd(accountOpeningAppln, statusFindById);

	            case "014":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.NOMINEE_SAVED.getValue());
	                return sPDao2.savePartialDetailsGaurdianPersonal(accountOpeningAppln, statusFindById);

	            case "015":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.NOMINEE_SAVED.getValue());
	                return sPDao2.savePartialDetailsGaurdianPermAdd(accountOpeningAppln, statusFindById);
	            default:		           
		    	    FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),thisMethod,AccountOpeningConstant.METHOD_END.getValue());
		            return false;
	        }
	    } catch (ServiceBusinessException e) {
			FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),thisMethod,AccountOpeningConstant.PERSONAL_DETAILS_NOT_SAVED.getValue()+AccountOpeningConstant.METHOD_END.getValue());
	        FLogger.error(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                thisMethod, ExceptionUtils.getStackTrace(e));
	        throw new ServiceBusinessException(AccountOpeningConstant.UNEXPECTED_ERROR.getValue());
	    }

	}
	/**
	 * Method:handleRemainingCases
	 * saving PersonalData using accountOpeningAppln
	 * @param accountOpeningAppln (An instance of AccountOpeningAppln containing the details to be saved.)
	 * @param OnboardingStatusVo optional statusFindById
	 * @return boolean  Saved or Not Saved
	 * @throws ServiceBusinessException
	 * @throws JsonProcessingException 
	 * @throws FileNotFoundException 
	 */

	private boolean handleRemainingCases(AccountOpeningAppln accountOpeningAppln,
	        Optional<OnboardingStatusVo> statusFindById)
	        throws ServiceBusinessException, FileNotFoundException, JsonProcessingException {
		String thisMethod="handleRemainingCases";
		FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),thisMethod,AccountOpeningConstant.METHOD_STARTED.getValue());

	    try {
	        switch (accountOpeningAppln.getState()) {
	            case "016":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.BRANCH_DETAILS_SAVED.getValue());
	                return acntDao.saveBranchDetails(accountOpeningAppln);

	            case "017":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.DECLARATION_SAVED.getValue());
	                return setFlags.saveChecks(accountOpeningAppln);

	            case "020":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.NOMINEE_SAVED.getValue());
	                return spd3.saveDebitCardDetails(accountOpeningAppln, statusFindById);

	            case "024":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.NOMINEE_SAVED.getValue());
	                return spd3.saveTermsAndCondition(accountOpeningAppln, statusFindById);

	            case "028":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.VKYC_SAVED.getValue());
	                return saveVKYCDao.saveVKYCDetails(accountOpeningAppln,statusFindById);

	            case "031":
	                FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                        thisMethod, AccountOpeningConstant.CUSTOMERSELFIE_SAVED.getValue());
	                return acntDao.saveCustomerSelfie(accountOpeningAppln);
	            default:		           
		    	    FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),thisMethod,AccountOpeningConstant.METHOD_END.getValue());
		            return false;
	        }
	    } catch (ServiceBusinessException e) {
	        FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),thisMethod,AccountOpeningConstant.PERSONAL_DETAILS_NOT_SAVED.getValue()+AccountOpeningConstant.METHOD_END.getValue());
	        FLogger.error(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(),
	                thisMethod, ExceptionUtils.getStackTrace(e));
	        throw new ServiceBusinessException(AccountOpeningConstant.UNEXPECTED_ERROR.getValue());
	    }
	   
	}
in acountopening dao for blank handling default case 

	public boolean savePersonalDetails(AccountOpeningAppln accountOpeningAppln)
			throws ServiceBusinessException, NumberFormatException, JsonProcessingException{
		String thisMethod = "savePersonalDetails";
		ServiceBusinessException businessException=new ServiceBusinessException();
		String leadId=accountOpeningAppln.getLead().getLeadId();
		FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.METHOD_STARTED.getValue());
		AddComposite addPKeys = new AddComposite();
		addPKeys.setRefNo(accountOpeningAppln.getLead().getLeadId());
		Optional<PersonalDtlsVo> personalDtlsFindById = customerPersonalDetailsRepo.findById(accountOpeningAppln.getLead().getLeadId());
		OnboardingStatusComposite onboardingStatusComposite = new OnboardingStatusComposite();
		onboardingStatusComposite.setRefNo(accountOpeningAppln.getLead().getLeadId());
		String jrnyId = accountOpeningAppln.getLead().getLeadId().substring(5, 8);
		onboardingStatusComposite.setJourneyId(jrnyId);
		Optional<OnboardingStatusVo> statusFindById = onboardingStatusRepo
				.findByOnbrdngSts(accountOpeningAppln.getLead().getLeadId(), jrnyId);
		if (statusFindById.isPresent()) {
			FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.LEADIDPRESENT.getValue());
			if (personalDtlsFindById.isPresent()) {
				FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.CUSTDETAILSPRE.getValue());
				PersonalDtlsVo personalDetails = personalDtlsFindById.get();
				if (accountOpeningAppln.getLead().getPersonalDtls() != null) {
					FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.PERSONAL_DETAILS_PRESENT.getValue());
					savePersonalDtlsDao.settingPersonalDtls(accountOpeningAppln, personalDetails);
					OccupationDtls occupationDtls = accountOpeningAppln.getLead().getPersonalDtls().getOccupationDtls();
					saveOccupationCode( personalDetails, occupationDtls);
					if (accountOpeningAppln.getLead().getPersonalDtls().getPermAddress() != null) {
						FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.PERSONAL_PERMADD_PRESENT.getValue());
						addPKeys.setCustomerType(AccountOpeningConstant.PERSONAL_ADDRESS.getValue());
						Optional<AddressDtlsVo> personalAddressFindById = addressDtlsRepo.findById(addPKeys);
			
						saveGaurdianDao.checkAddress(accountOpeningAppln.getLead().getLeadId(),accountOpeningAppln.getLead().getPersonalDtls().getPermAddress(),personalAddressFindById,AccountOpeningConstant.PERSONAL_ADDRESS.getValue(),statusFindById);

						if (accountOpeningAppln.getLead().getPersonalDtls().getCommAddress() != null
								&& !(accountOpeningAppln.getLead().getPersonalDtls().getPermAddress()
										.isIspermanentAddressSameAsComm())) {
							FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.COMM_ADDRESS_PRESENT.getValue());
							saveGaurdianDao.checkCommAddress(accountOpeningAppln);
							
						}}savePersonalDtlsDao.settingPersonalDtlsCode(accountOpeningAppln,personalDetails);}
				personalDetails.setUpdtdDt(LocalDateTime.now());
				if(accountOpeningAppln.getLead().getPersonalDtls() != null&& accountOpeningAppln.getLead().getPersonalDtls().getIsNomineeRequired() != null && accountOpeningAppln.getLead().getPersonalDtls().getIsNomineeRequired()) {
											saveNomineeDao.saveNomineeParameter(accountOpeningAppln);
				FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.NOMINEE_DETAILS_ARE_PRESENT.getValue());
				
				}
				if (accountOpeningAppln.getLead().getVkycDetails() != null) {
					FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.VKYC_DETAILS_PRESENT.getValue());
					Optional<VkycDtls> vkycDtlsFindById = vkycDtlsRepo.findById(accountOpeningAppln.getLead().getLeadId());
					saveVKYCDao.saveVKYCDetails(accountOpeningAppln, statusFindById);
				} else {
					FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,AccountOpeningConstant.VKYC_DETAILS_NOT_FOUND.getValue());
				}
				if(accountOpeningAppln.getLead().getDebitCardDtls() != null) {
					FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,AccountOpeningConstant.DEBITCARD_DETAILS_ARE_PRESENT.getValue());
					saveDebitCardDao.checkDebitCardDetails(accountOpeningAppln);
				}
				if(accountOpeningAppln.getLead().getDebitCardDtls()!= null) {
					FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,AccountOpeningConstant.DEBITCARD_DETAILS_ARE_PRESENT.getValue());
					saveDebitCardDao.checkDebitCardFlags(accountOpeningAppln);
				}				
				int channelKey=(short)SessionContext.getChannelId().longValue(); 
				CustomerOnboardingStatusVo customerOnboardingStatusVo = new CustomerOnboardingStatusVo();
				OnboardingStatusVo onboardingStatusVo = statusFindById.get();
				onboardingStatusVo.setStatus(accountOpeningAppln.getState());
				setFlags.settingCustOnboardStatus(accountOpeningAppln.getLead().getLeadId(),accountOpeningAppln.getState(), channelKey, customerOnboardingStatusVo);
				try {
					customerPersonalDetailsRepo.save(personalDetails);
					customerOnboardingStatusRepo.save(customerOnboardingStatusVo);
					onboardingStatusRepo.save(onboardingStatusVo);
					FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.PERSONAL_DETAILS_SAVED.getValue());
					status = true;
				} catch (IllegalArgumentException e) {
					businessException.addBizError(erMap.mapCode(leadId.substring(5,8),AccountOpeningConstant.DATABASEEXCEPTION.getValue()));			

					FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,AccountOpeningConstant.PERSONAL_DETAILS_NOT_SAVED.getValue() + e.getStackTrace());
					FLogger.error(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,ExceptionUtils.getStackTrace(businessException));
					throw businessException;
				}
			} else {
				personalDetailsNotPresent(accountOpeningAppln, statusFindById);}
			FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.PERSONAL_DETAILS_NOT_PRESENT.getValue());
		} else {
			FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod,"details not present in Customer onboarding");
			businessException.addBizError(erMap.mapCode(accountOpeningAppln.getLead().getLeadId().substring(5, 8),
					AccountOpeningConstant.RESOURCENOTFOUND.getValue()));
			
			FLogger.error(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, ExceptionUtils.getStackTrace(businessException));
			FLogger.error(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.RESOURCE_NOT_FOUND.getValue());
			throw businessException;}
		FLogger.info(AccountOpeningConstant.TIER_NAME.getValue(), this.getClass().getName(), thisMethod, AccountOpeningConstant.METHOD_END.getValue());
		return status;
	}

